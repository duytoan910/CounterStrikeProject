/* Plugin generated by AMXX-Studio */

#include <amxmodx>
#include <amxmisc>

#define PLUGIN "New Plug-In"
#define VERSION "1.0"
#define AUTHOR "Administrator"

enum (+= 100)
{
	TASK_WAIT = 2000,
	TASK_ATTACK,
	TASK_BOT_CHAT,
	TASK_CHAT
}
// IDs inside tasksg
#define ID_WAIT (taskid - TASK_WAIT)
#define ID_ATTACK (taskid - TASK_ATTACK)
#define ID_BOT_CHAT (taskid - TASK_BOT_CHAT)
#define ID_CHAT (taskid - TASK_CHAT)

new g_szPhrases[10][65]
new g_iCount
new g_maxplayers

public plugin_init() {
	register_plugin(PLUGIN, VERSION, AUTHOR)
	
	register_logevent("roundStart", 2, "1=Round_Start")
	register_logevent("logevent_round_end", 2, "1=Round_End");
	g_maxplayers=get_maxplayers()

	// Retrieve Sorry phrases from bot_apology.ini
	new szFilepath[64]
	get_configsdir(szFilepath, charsmax(szFilepath))
	add(szFilepath, charsmax(szFilepath), "/bot_chat.ini")
	
	if( !file_exists(szFilepath) )
	{
		copy(g_szPhrases[0], charsmax(g_szPhrases[]), "Hello!")
		g_iCount = 1
		return
	}
	
	new f = fopen(szFilepath, "rt")
	
	new szData[sizeof(g_szPhrases[])]
	g_iCount = 0

	while( !feof(f) && g_iCount < sizeof(g_szPhrases)) 
	{ 
		fgets(f, szData, charsmax(szData))
		 
		trim(szData)
		if( !szData[0] || szData[0] == ';'
		    || szData[0] == '/' && szData[1] == '/' ) continue;
		copy(g_szPhrases[g_iCount], charsmax(g_szPhrases[]), szData)
		g_iCount++
	}
	
	fclose(f)	
}
reset_value_player(id)
{
	if (task_exists(id+TASK_BOT_CHAT)) remove_task(id+TASK_BOT_CHAT)
}
public roundStart(id)
{
	for (new id=1; id<33; id++)
	{
		if (!is_user_connected(id)) continue;
		if (is_user_bot(id))
		{
			if (task_exists(id+TASK_BOT_CHAT)) remove_task(id+TASK_BOT_CHAT)
			set_task(random_float(50.0,160.0), "bot_chat", id+TASK_BOT_CHAT)
		}
	}
}

public logevent_round_end(id)
{
	reset_value_player(id)
}
public bot_chat(taskid)
{
	new id = ID_BOT_CHAT
	if (!is_user_bot(id)) return;
	
	
	static iPlayersnum
	iPlayersnum = fnGetAlive()
	
	new Id;Id=fnGetRandomAlive(random_num(1,iPlayersnum))
	static Name[64]; get_user_name(Id, Name, sizeof(Name))
	

	new szChatMethod[9]
	copy(szChatMethod, 8, "say");
	//engclient_cmd(id,szChatMethod,g_szPhrases[random(g_iCount)])
	//engclient_cmd(id,"say Hello %s!",Name)
	
	switch(random(5))
	{
		case 4..5:{
			switch(random_num(1,30))
			{
				case 1..10:
				{
					engclient_cmd(id,"say", "Hello",Name)
				}
				case 11..20:
				{
					engclient_cmd(id,"say", "Fuck you",Name)
				}
				case 21..30:
				{
					engclient_cmd(id,"say", "Noice")
				}
			}			
		}
	}
	
	if (task_exists(taskid)) remove_task(taskid)
	set_task(float(random_num(130,160)), "bot_chat", id+TASK_BOT_CHAT)
}

// Get Random Alive -returns index of alive player number n -
fnGetRandomAlive(n)
{
	static iAlive, id
	iAlive = 0
	
	for (id = 1; id <= g_maxplayers; id++)
	{
		if (is_user_alive(id))
			iAlive++
		
		if (iAlive == n)
			return id;
	}
	
	return -1;
}

// Get Alive -returns alive players number-
fnGetAlive()
{
	static iAlive, id
	iAlive = 0
	
	for (id = 1; id <= g_maxplayers; id++)
	{
		if (is_user_alive(id))
			iAlive++
	}
	
	return iAlive;
}
