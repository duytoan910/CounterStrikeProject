/* Plugin generated by AMXX-Studio */

#include <amxmodx>
#include <engine>
#include <fakemeta_util>
#include <hamsandwich>
#include <zombieplague>

#define PLUGIN "New Plug-In"
#define VERSION "1.0"
#define AUTHOR "author"

#define BOSS_HP 300000.0
#define BLOODCOLOR 248
#define FIGHT_MUSIC "zombie_plague/boss/background/Scenario_Start.mp3"

native Create_FallenTitan(id, Float:HP)
native Create_Oberon(id, Float:HP)
native Create_Dione(id, Float:HP)
native Create_Phobos(id, Float:HP)
native Create_Revenant(id, Float:HP)
//native Create_Angra(id, Float:HP)
native set_hb_maxhp(Float:value)

new g_Boss_Ent, m_iBlood[2]

public plugin_init() {
	register_plugin(PLUGIN, VERSION, AUTHOR)
	register_event("HLTV", "Event_NewRound", "a", "1=0", "2=0")	
	register_clcmd("say /aim", "SetAim")
}

public plugin_precache()
{
	engfunc(EngFunc_PrecacheSound, FIGHT_MUSIC)
	m_iBlood[0] = precache_model("sprites/blood.spr")
	m_iBlood[1] = precache_model("sprites/bloodspray.spr")
}
public Event_NewRound()
{
	PlaySound(0, "")
	remove_entity(g_Boss_Ent)
}
public zp_round_started(gamemode,id)
{
	if(gamemode != MODE_NPC)
		return
		
	PlaySound(0, FIGHT_MUSIC)
	
	//switch(random_num(0,4))
	switch(0)
	{
		case 0:g_Boss_Ent = Create_FallenTitan(id, BOSS_HP)
		case 1:g_Boss_Ent = Create_Oberon(id, BOSS_HP)
		case 2:g_Boss_Ent = Create_Dione(id, BOSS_HP)
		case 3:g_Boss_Ent = Create_Phobos(id, BOSS_HP)
		case 4:g_Boss_Ent = Create_Revenant(id, BOSS_HP)
		//case 5:g_Boss_Ent = Create_Angra(id, Boss_HP)
	}	
	
	RegisterHamFromEntity(Ham_TakeDamage, g_Boss_Ent, "fw_TakeDamage")
	RegisterHamFromEntity(Ham_TraceAttack, g_Boss_Ent, "fw_TraceAttack")
	
	set_hb_maxhp(BOSS_HP)
	Bot_Setting(id)	
}
public SetAim()
{
	static Float:BossOrg[3], Float:angles[3]
	//pev(target, pev_origin, BossOrg)
	for(new i=0;i<get_maxplayers();i++)
	{		
		if(!is_user_alive(i))
			continue
		
		engfunc(EngFunc_GetBonePosition,g_Boss_Ent,8,BossOrg,angles)	
		entity_set_aim(i,BossOrg,8)
	}
}
public Bot_Setting(id)
{
	if(!is_user_alive(id))
		return
	
	fm_strip_user_weapons(id)
	fm_give_item(id, "weapon_knife")
	set_pev(id, pev_solid, SOLID_NOT)
	set_pev(id, pev_movetype, MOVETYPE_NONE)
	set_pev(id, pev_takedamage, DAMAGE_NO)
	fm_set_rendering(id, kRenderFxGlowShell, 0, 0, 0, kRenderTransAlpha, 0)
}
public fw_TakeDamage(victim, inflictor, attacker, Float:damage)
{
	if (victim != attacker && is_user_connected(attacker))
	{
		//client_print(attacker, print_center, "Damge: [%.1f] HP: [%i]", damage, pev(g_Boss_Ent, pev_health))
	}
}
public fw_TraceAttack(Ent, Attacker, Float:Damage, Float:Dir[3], ptr, DamageType)
{
	if(!is_valid_ent(Ent)) 
		return
     
	static Classname[32], BossClassame[32]
	pev(g_Boss_Ent, pev_classname, BossClassame, charsmax(BossClassame))
	pev(Ent, pev_classname, Classname, charsmax(Classname)) 
	     
	if(!equal(Classname, BossClassame))
		return
		
	static Float:EndPos[3] 
	get_tr2(ptr, TR_vecEndPos, EndPos)
	create_blood(EndPos)	
	zp_set_user_ammo_packs(Attacker, zp_get_user_ammo_packs(Attacker)+1)	
}
public client_PreThink(id)
{
	if(!is_user_alive(id))
		return
	if(!pev_valid(g_Boss_Ent))
		return
	
	entity_set_int(id, EV_INT_watertype, -3);
	
	//client_print(id, print_center, "HP: [%.0f]", pev(g_Boss_Ent, pev_health)-50000.0)
	
	if(!zp_get_user_nemesis(id))
		return;
		
	static Float:EntOrigin[3]
	pev(g_Boss_Ent, pev_origin, EntOrigin)
	EntOrigin[2]+=120.0
	set_pev(id, pev_origin, EntOrigin)	
	pev(g_Boss_Ent, pev_v_angle, EntOrigin)
	set_pev(id, pev_v_angle, EntOrigin)	
	set_pev(id, pev_velocity, {0,0,0})
	set_pev(id, pev_maxspeed, 0.0)
	
}
stock entity_set_aim(ent,const Float:origin2[3],bone=0)
{
	if(!pev_valid(ent))
		return 0;

	static Float:origin[3]
	origin[0] = origin2[0]
	origin[1] = origin2[1]
	origin[2] = origin2[2]

	static Float:ent_origin[3], Float:angles[3]

	if(bone)
		engfunc(EngFunc_GetBonePosition,ent,bone,ent_origin,angles)
	else
		pev(ent,pev_origin,ent_origin)

	origin[0] -= ent_origin[0]
	origin[1] -= ent_origin[1]
	origin[2] -= ent_origin[2]

	static Float:v_length
	v_length = vector_length(origin)

	static Float:aim_vector[3]
	aim_vector[0] = origin[0] / v_length
	aim_vector[1] = origin[1] / v_length
	aim_vector[2] = origin[2] / v_length

	static Float:new_angles[3]
	vector_to_angle(aim_vector,new_angles)

	new_angles[0] *= -1

	if(new_angles[1]>180.0) new_angles[1] -= 360
	if(new_angles[1]<-180.0) new_angles[1] += 360
	if(new_angles[1]==180.0 || new_angles[1]==-180.0) new_angles[1]=-179.999999

	set_pev(ent,pev_angles,new_angles)
	set_pev(ent,pev_fixangle,1)

	return 1;
}
stock create_blood(const Float:origin[3])
{
	message_begin(MSG_BROADCAST, SVC_TEMPENTITY)
	write_byte(TE_BLOODSPRITE)
	write_coord(floatround(origin[0]))
	write_coord(floatround(origin[1]))
	write_coord(floatround(origin[2]))
	write_short(m_iBlood[1])
	write_short(m_iBlood[0])
	write_byte(BLOODCOLOR)
	write_byte(random_num(5,10))
	message_end()
}
stock PlaySound(id, const sound[])
{
	if(equal(sound, ""))
		client_cmd(id, "mp3 stop")
	if (equal(sound[strlen(sound)-4], ".mp3"))
		client_cmd(id, "mp3 play ^"sound/%s^"", sound)
	else
		client_cmd(id, "spk ^"%s^"", sound)
}
