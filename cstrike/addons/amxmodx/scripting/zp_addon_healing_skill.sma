/* Plugin generated by AMXX-Studio */

#include <amxmodx>
#include <fakemeta>
#include <zombieplague>
#include <hamsandwich>

#define PLUGIN "Healing skill"
#define VERSION "1.0"
#define AUTHOR "HS"

#define HEAL_TIME 3.0
#define HEAL_AMOUNT 1000.0

new cvar_active
new Float:user_time[32],sprid
new bool:can_heal[32]

new const spr[] = "sprites/zb_restore_health.spr"
new const skillsound[] = "zombie_plague/zombi_heal.wav";

native zp_cso_get_lvl_health(id)

public plugin_init() 
{
	register_plugin(PLUGIN, VERSION, AUTHOR)
	cvar_active = register_cvar("zp_zombie_heal_enable", "1")
	register_forward(FM_PlayerPreThink, "fm_pthink")
}	
public plugin_precache()
{
	precache_sound(skillsound);
	sprid = engfunc(EngFunc_PrecacheModel, spr)
}
public fm_pthink(id)
{
	if (get_cvar_num("bot_stop"))
		return FMRES_IGNORED
	if ( zp_get_user_nemesis(id) || zp_get_user_survivor(id))
		return FMRES_IGNORED
	if ( zp_get_user_assassin(id) || zp_get_user_sniper(id))
		return FMRES_IGNORED
	if (!zp_get_user_zombie(id))
		return FMRES_IGNORED
	if (!is_user_alive(id))
		return FMRES_IGNORED
	if (!get_pcvar_num(cvar_active))
		return FMRES_IGNORED
	new button = pev(id, pev_button)
	if (button & IN_MOVELEFT || button & IN_MOVERIGHT || button & IN_FORWARD || button & IN_BACK || button & IN_JUMP)
		can_heal[id] = false
	if (!(button & IN_MOVELEFT || button & IN_MOVERIGHT || button & IN_FORWARD || button & IN_BACK || button & IN_JUMP))
	{
		if (!can_heal[id])
		{
			can_heal[id] = true
			user_time[id] = get_gametime()
		}
		if (can_heal[id])
		{
			new Float:current_time = get_gametime()
			if (current_time - user_time[id] >= HEAL_TIME)
			{
				rehealth(id)
				can_heal[id] = false
			}
		}
	}
	return FMRES_HANDLED
}
/*
public rehealth(id)
{
	new health = pev(id, pev_health)
	if (health < zp_get_zombie_maxhealth(id))
	{
		if (health + HEAL_AMOUNT < zp_get_zombie_maxhealth(id))
		{
			set_pev(id, pev_health, pev(id, pev_health) + HEAL_AMOUNT)
			emit_sound(id, CHAN_BODY, "zombie_plague/zombi_heal.wav", 1.0, ATTN_NORM, 0, PITCH_NORM)
		}
		else
		{
			set_pev(id, pev_health, float(zp_get_zombie_maxhealth(id)))
			emit_sound(id, CHAN_BODY, "zombie_plague/zombi_heal.wav", 1.0, ATTN_NORM, 0, PITCH_NORM)
		}
	}
}*/

public rehealth(id)
{
	new health = pev(id, pev_health)
	new Float:Ori[3]; pev(id, pev_origin, Ori)
	if (health < (zp_get_zombie_maxhealth(id) + zp_cso_get_lvl_health(id)))
	{
		if (health + HEAL_AMOUNT < (zp_get_zombie_maxhealth(id) + zp_cso_get_lvl_health(id)))
		{
			set_pev(id, pev_health, pev(id, pev_health) + HEAL_AMOUNT)
			emit_sound(id, CHAN_BODY, "zombie_plague/zombi_heal.wav", 1.0, ATTN_NORM, 0, PITCH_NORM)
			message_begin(MSG_BROADCAST,SVC_TEMPENTITY)
			write_byte(TE_SPRITE)
			write_coord(floatround(Ori[0]))
			write_coord(floatround(Ori[1]))
			write_coord(floatround(Ori[2]))
			write_short(sprid)
			write_byte(12)
			write_byte(255)
			message_end()
			//md_zb_skill(id, 1)
		}
		else
		{
			set_pev(id, pev_health, float((zp_get_zombie_maxhealth(id) + zp_cso_get_lvl_health(id))))
			emit_sound(id, CHAN_BODY, "zombie_plague/zombi_heal.wav", 1.0, ATTN_NORM, 0, PITCH_NORM)
			message_begin(MSG_BROADCAST,SVC_TEMPENTITY)
			write_byte(TE_SPRITE)
			write_coord(floatround(Ori[0]))
			write_coord(floatround(Ori[1]))
			write_coord(floatround(Ori[2]))
			write_short(sprid)
			write_byte(12)
			write_byte(255)
			message_end()
			//md_zb_skill(id, 1)
		}
	}
}
